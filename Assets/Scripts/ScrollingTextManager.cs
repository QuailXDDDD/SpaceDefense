using UnityEngine;
using UnityEngine.UI;
using UnityEngine.SceneManagement;
using System.Collections;
using TMPro;

public class ScrollingTextManager : MonoBehaviour
{
    [Header("Scrolling Text Settings")]
    public TextMeshProUGUI scrollingText;
    public TextMeshProUGUI finishText;
    public float scrollSpeed = 50f;
    public float startDelay = 1f;
    public float finishTextDelay = 1f;
    public float endDelay = 2f;
    
    [Header("Scene Settings")]
    public string gameSceneName = "SampleScene";
    
    [Header("Skip Settings")]
    public KeyCode skipKey = KeyCode.Space;
    public KeyCode skipKey2 = KeyCode.Escape;
    public Button skipButton;
    
    [Header("Text Content")]
    [TextArea(10, 15)]
    public string storyText = @"NƒÉm 2157...

Tr√°i ƒê·∫•t ƒëang ph·∫£i ƒë·ªëi m·∫∑t v·ªõi cu·ªôc x√¢m lƒÉng t·ª´ nh·ªØng k·∫ª th√π b√≠ ·∫©n t·ª´ v≈© tr·ª• s√¢u th·∫≥m.

C√°c h·∫°m ƒë·ªôi ph√≤ng th·ªß c·ªßa ch√∫ng ta ƒë√£ b·ªã ti√™u di·ªát.

B·∫°n l√† phi c√¥ng cu·ªëi c√πng c·ªßa L·ª±c l∆∞·ª£ng Ph√≤ng th·ªß Tr√°i ƒê·∫•t.

S·ªë ph·∫≠n c·ªßa nh√¢n lo·∫°i n·∫±m trong tay b·∫°n.

H√£y b·∫£o v·ªá h√†nh tinh ch√∫ng ta!

Ch√∫c may m·∫Øn, Phi c√¥ng...";
    
    [Header("Finish Text Settings")]
    [TextArea(2, 3)]
    public string finishMessage = "FINISH THE MISSION";
    public float finishTextSpeed = 80f;
    
    private RectTransform textRectTransform;
    private RectTransform finishTextRectTransform;
    private Canvas canvas;
    private float canvasHeight;
    private float textHeight;
    private float finishTextHeight;
    private bool isScrolling = false;
    private bool skipRequested = false;
    
    void Start()
    {
        InitializeScrollingText();
        StartCoroutine(ScrollingSequence());
    }
    
    void Update()
    {
        // Ki·ªÉm tra input ƒë·ªÉ skip
        if ((Input.GetKeyDown(skipKey) || Input.GetKeyDown(skipKey2)) && !skipRequested)
        {
            SkipToGame();
        }
    }
    
    void InitializeScrollingText()
    {
        // Thi·∫øt l·∫≠p story text content
        if (scrollingText != null)
        {
            scrollingText.text = storyText;
            textRectTransform = scrollingText.GetComponent<RectTransform>();
        }
        else
        {
            Debug.LogError("ScrollingTextManager: Scrolling text component not assigned!");
            return;
        }
        
                 // Thi·∫øt l·∫≠p finish text content
         if (finishText != null)
         {
             finishText.text = finishMessage;
             finishTextRectTransform = finishText.GetComponent<RectTransform>();
             Debug.Log($"Finish text component found: {finishText.name}");
         }
         else
         {
             Debug.LogWarning("ScrollingTextManager: Finish text component not assigned! Creating one automatically...");
             CreateFinishTextAutomatically();
         }
        
        // L·∫•y canvas
        canvas = scrollingText.GetComponentInParent<Canvas>();
        if (canvas != null)
        {
            canvasHeight = canvas.GetComponent<RectTransform>().sizeDelta.y;
        }
        
        // T√≠nh to√°n k√≠ch th∆∞·ªõc text
        LayoutRebuilder.ForceRebuildLayoutImmediate(textRectTransform);
        textHeight = textRectTransform.sizeDelta.y;
        
        LayoutRebuilder.ForceRebuildLayoutImmediate(finishTextRectTransform);
        finishTextHeight = finishTextRectTransform.sizeDelta.y;
        
        // ƒê·∫∑t v·ªã tr√≠ ban ƒë·∫ßu cho story text (d∆∞·ªõi m√†n h√¨nh)
        Vector3 startPosition = textRectTransform.anchoredPosition;
        startPosition.y = -(canvasHeight/2 + textHeight/2);
        textRectTransform.anchoredPosition = startPosition;
        
                 // ƒê·∫∑t v·ªã tr√≠ ban ƒë·∫ßu cho finish text (xa h∆°n xu·ªëng d∆∞·ªõi)
         Vector3 finishStartPosition = finishTextRectTransform.anchoredPosition;
         finishStartPosition.y = -(canvasHeight + 100f); // ƒê∆°n gi·∫£n h∆°n, ch·ªâ c·∫ßn xu·ªëng d∆∞·ªõi canvas
         finishTextRectTransform.anchoredPosition = finishStartPosition;
         
         Debug.Log($"Finish text start position: {finishStartPosition.y}");
        
        // Thi·∫øt l·∫≠p skip button
        if (skipButton != null)
        {
            skipButton.onClick.AddListener(SkipToGame);
        }
        
        Debug.Log($"ScrollingTextManager: Initialized. Canvas height: {canvasHeight}, Story text height: {textHeight}, Finish text height: {finishTextHeight}");
    }
    
    IEnumerator ScrollingSequence()
    {
        // Ch·ªù tr∆∞·ªõc khi b·∫Øt ƒë·∫ßu
        yield return new WaitForSeconds(startDelay);
        
        isScrolling = true;
        
        // Phase 1: Scroll story text
        float storyTargetY = canvasHeight/2 + textHeight/2;
        
        while (textRectTransform.anchoredPosition.y < storyTargetY && !skipRequested)
        {
            Vector3 currentPos = textRectTransform.anchoredPosition;
            currentPos.y += scrollSpeed * Time.deltaTime;
            textRectTransform.anchoredPosition = currentPos;
            
            yield return null;
        }
        
        if (!skipRequested)
        {
            // Ch·ªù m·ªôt ch√∫t tr∆∞·ªõc khi scroll finish text
            yield return new WaitForSeconds(finishTextDelay);
            
                         // Phase 2: Scroll finish text
             float finishTargetY = 0f; // Center c·ªßa m√†n h√¨nh
             
             Debug.Log($"Starting finish text scroll from Y: {finishTextRectTransform.anchoredPosition.y} to target: {finishTargetY}");
             
             while (finishTextRectTransform.anchoredPosition.y < finishTargetY && !skipRequested)
             {
                 Vector3 currentPos = finishTextRectTransform.anchoredPosition;
                 currentPos.y += finishTextSpeed * Time.deltaTime;
                 finishTextRectTransform.anchoredPosition = currentPos;
                 
                 // Debug log m·ªói v√†i frame
                 if (Time.frameCount % 30 == 0)
                 {
                     Debug.Log($"Finish text current Y: {currentPos.y}");
                 }
                 
                 yield return null;
             }
             
             Debug.Log($"Finish text scroll completed at Y: {finishTextRectTransform.anchoredPosition.y}");
            
            if (!skipRequested)
            {
                // Ch·ªù m·ªôt ch√∫t tr∆∞·ªõc khi chuy·ªÉn scene
                yield return new WaitForSeconds(endDelay);
                
                // Chuy·ªÉn sang game scene
                TransitionToGame();
            }
        }
    }
    
    public void SkipToGame()
    {
        if (!skipRequested)
        {
            skipRequested = true;
            Debug.Log("ScrollingTextManager: Skip requested");
            
            // Play sound effect n·∫øu c√≥
            if (AudioManager.Instance != null)
            {
                AudioManager.Instance.PlayPowerUp();
            }
            
            TransitionToGame();
        }
    }
    
    void TransitionToGame()
    {
        Debug.Log($"ScrollingTextManager: Transitioning to game scene: {gameSceneName}");
        SceneManager.LoadScene(gameSceneName);
    }
    
    void OnDestroy()
    {
        if (skipButton != null)
        {
            skipButton.onClick.RemoveListener(SkipToGame);
        }
    }
    
    [ContextMenu("Test Transition")]
    public void TestTransition()
    {
        TransitionToGame();
    }
    
    void CreateFinishTextAutomatically()
    {
        // T·∫°o finish text t·ª± ƒë·ªông n·∫øu ch∆∞a c√≥
        GameObject finishTextObj = new GameObject("FinishText");
        finishTextObj.transform.SetParent(scrollingText.transform.parent);
        
        finishText = finishTextObj.AddComponent<TextMeshProUGUI>();
        finishText.text = finishMessage;
        finishText.fontSize = 48;
        finishText.color = Color.yellow;
        finishText.alignment = TextAlignmentOptions.Center;
        finishText.fontStyle = FontStyles.Bold;
        
        finishTextRectTransform = finishText.GetComponent<RectTransform>();
        finishTextRectTransform.sizeDelta = new Vector2(800, 100);
        finishTextRectTransform.anchoredPosition = Vector2.zero;
        
        Debug.Log("‚úÖ Auto-created finish text component");
    }
    
    [ContextMenu("Force Create Finish Text")]
    public void ForceCreateFinishText()
    {
        CreateFinishTextAutomatically();
    }
    
    [ContextMenu("Test Finish Text Scroll")]
    public void TestFinishTextScroll()
    {
        if (finishTextRectTransform != null)
        {
            StartCoroutine(TestFinishScrollCoroutine());
        }
        else
        {
            Debug.LogError("Finish text not found!");
        }
    }
    
    IEnumerator TestFinishScrollCoroutine()
    {
        Debug.Log("üß™ Testing finish text scroll...");
        
        // Reset v·ªã tr√≠
        Vector3 startPos = finishTextRectTransform.anchoredPosition;
        startPos.y = -1000f;
        finishTextRectTransform.anchoredPosition = startPos;
        
        float targetY = 0f;
        Debug.Log($"Scrolling from {startPos.y} to {targetY}");
        
        while (finishTextRectTransform.anchoredPosition.y < targetY)
        {
            Vector3 currentPos = finishTextRectTransform.anchoredPosition;
            currentPos.y += finishTextSpeed * Time.deltaTime;
            finishTextRectTransform.anchoredPosition = currentPos;
            
            if (Time.frameCount % 30 == 0)
            {
                Debug.Log($"Test scroll Y: {currentPos.y}");
            }
            
            yield return null;
        }
        
        Debug.Log("üéâ Test scroll completed!");
    }
} 